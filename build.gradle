plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'war'
    id 'com.palantir.docker' version '0.22.1'
	id "com.github.node-gradle.node" version "2.2.3" 
}

compileJava.dependsOn(processResources)

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
	options.compilerArgs = ["-Xlint:unchecked", "-Xlint:deprecation", "-parameters"]
}

repositories {
	maven { url "https://repo1.maven.org/maven2" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url 'https://repo.spring.io/libs-snapshot' }
	
	mavenLocal()
	mavenCentral()
}

dependencies {

	compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.4.RELEASE'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.1.4.RELEASE'
	compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '2.1.4.RELEASE'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: '2.1.4.RELEASE'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '2.1.4.RELEASE'
	
	// spring jdbc
	compile group: 'org.springframework', name: 'spring-jdbc', version: '5.1.5.RELEASE'  // db 연동 시 필요 ( rcs-gw-common autoconfigure 실행 방지)
	
	compile group: 'joda-time', name: 'joda-time', version: '2.10.8'
	
	// mysql(mariadb driver)
	compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.6.0'
	
	// https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4.1
	  compile group: 'org.bgee.log4jdbc-log4j2', name: 'log4jdbc-log4j2-jdbc4.1', version: '1.16'

	// mybatis
	compile group: 'org.mybatis', name: 'mybatis-spring', version: '1.3.1'
	compile group: 'org.mybatis', name: 'mybatis', version: '3.4.4'
		
	// lombok
	compileOnly 'org.projectlombok:lombok:1.18.6'
	annotationProcessor 'org.projectlombok:lombok:1.18.6'
	
	// ssl
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.8'
	compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.4'
    
    // https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.0'
    
	
	compile fileTree(dir:'libs', include:'*.jar')
	compile project(':cm-web-common')
	
	compile group: 'org.apache.poi', name: 'poi', version: '3.16'
	
	// json
	compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
}


node {
	version = '12.7.0'
	npmVersion = '6.10.0'
//    npmInstallCommand = 'install' 
//    distBaseUrl = 'https://nodejs.org/dist' 
    download = true
    workDir = file("${project.buildDir}/nodejs")
	npmWorkDir = file("./frontend")
	nodeModulesDir = file("./frontend")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		exclude group: 'ch.qos.logback', module: "logback-classic"
	}
}

task deleteVueArtifact(type: Delete) {
    delete "frontend/docker/dist"
}

task vueSetUp(type: NpmTask) {
	args = ['install']
	inputs.files file('package.json')
	outputs.files file('node_modules')
}

task buildVue(type: NpmTask, dependsOn: ['deleteVueArtifact', 'vueSetUp']) {
	group "cloud"
	description = "build vue.js"
	args = ['run', 'build']
}

//////////// docker, docker-compose //////////////

ext {
    BUILD_VERSION = new Date().format("yyyyMMdd_HHmmss") // 빌드한 시간을 Image Tag 로 표시하기 위하여 사용한다.
}

docker {
    name "ectech.co.kr:35001/cloud/${project.name}:latest"
    files bootJar.outputs.files
    dockerfile file('frontend/Dockerfile') 
    files file('frontend/docker') // 도커 만들때 쓸 파일
    buildArgs(['PROFILES': 'dev'])
}

task makeTag() {
    doLast {
		def stdout = new ByteArrayOutputStream()
        println "------------ docker makeTag  Start -----------"
        exec {
			workingDir projectDir
			commandLine "powershell", "-command", "docker tag ectech.co.kr:35001/cloud/${project.name}:latest ectech.co.kr:35001/cloud/${project.name}:${BUILD_VERSION}"
            standardOutput = stdout
        }
        println "Output: $stdout"
        println "------------ docker makeTag  End -------------"
    }
}

task push() {
	group "cloud"
    description 'docker push '
    
    dependsOn 'makeTag'

    doLast {
		def stdout = new ByteArrayOutputStream()
        println "------------ docker push  Start -----------"
        exec {
			workingDir projectDir
			commandLine "powershell", "-command", "docker push ectech.co.kr:35001/cloud/${project.name} --all-tags"
            standardOutput = stdout
        }
        println "Output: $stdout"
        println "------------ docker push  End -------------"
    }
}

task buildDocker() {
	group "cloud"
    description 'docker build '
    
    dependsOn 'docker'

    doLast {
		def stdout = new ByteArrayOutputStream()
        println "------------ docker build success -------------"
    }
}

task build_All() {
	group "cloud"
    description 'jar, vue and docker image build'
    
    dependsOn 'buildVue'
    dependsOn 'buildDocker'
    dependsOn 'push'
	tasks.findByName('buildDocker').mustRunAfter 'buildVue'
	tasks.findByName('push').mustRunAfter 'buildDocker'
    
	doLast {
		def stdout = new ByteArrayOutputStream()
        println "success"
	}
}
