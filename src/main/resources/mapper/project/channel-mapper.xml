<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="channel">

	<select id="selectRcsBrandList" resultType="camel">
	/* channel.selectRcsBrandList */
		SELECT	*
		FROM	(
			SELECT	A.BRAND_ID
			,		MAX(A.PROJECT_ID) AS PROJECT_ID
			,		MAX(A.CORP_ID) AS CORP_ID
			,		MAX(A.BRAND_NAME) AS BRAND_NAME
			,		MAX(A.BRAND_DESC) AS BRAND_DESC
			,		MAX(A.BRAND_INFO) AS BRAND_INFO
			,		'REQREQ' AS OTHER_PROJECT_USE_YN
			
			,		( 	SELECT	COUNT(MESSAGEBASE_ID) 
						FROM	cm_console.CM_RCS_TMP_MSGBASE
						WHERE	BRAND_ID  = A.BRAND_ID 
					) AS TMPL_CNT
			,		( 	SELECT	COUNT(CHATBOT_ID) 
						FROM	cm.CM_RCS_CHATBOT
						WHERE	BRAND_ID  = A.BRAND_ID 
					) AS CALLBACK_CNT
			,		CASE WHEN SUBSTRING(A.BRAND_ID, 1, 1) = 'T' THEN '임시저장' ELSE MAX(A.APPROVAL_STATUS) END	AS APPROVAL_STATUS
			,		''			AS REQ_DT
			,		''			AS APPROVAL_DT
			,		MAX(A.REG_DT) AS REG_DT 
			FROM	cm.CM_RCS_BRAND_REQ A
			WHERE	A.PROJECT_ID = #{projectId}
			AND		A.BRAND_INFO != ''
			AND		A.BRAND_ID NOT IN (
				SELECT	A.BRAND_ID
				FROM	cm.CM_RCS_BRAND A
				WHERE	A.PROJECT_ID = #{projectId}
				GROUP BY A.BRAND_ID
			) 
			GROUP BY A.BRAND_ID
			
			UNION
			
			SELECT 	A.BRAND_ID
			,		A.PROJECT_ID
			,		A.CORP_ID
			,		A.BRAND_NAME
			,		'' as BRAND_DESC -- 브랜드 정보 컬럼 자체가 없음...
			,		A.BRAND_INFO 
			,		'BRANDBRAND' AS OTHER_PROJECT_USE_YN
			,		( 	SELECT	COUNT(MESSAGEBASE_ID) 
						FROM	cm_console.CM_RCS_TMP_MSGBASE
						WHERE	BRAND_ID  = A.BRAND_ID 
					) AS TMPL_CNT
			,		( 	SELECT	COUNT(CHATBOT_ID) 
						FROM	cm.CM_RCS_CHATBOT
						WHERE	BRAND_ID  = A.BRAND_ID 
					) AS CALLBACK_CNT
			,		CASE WHEN A.APPROVAL_DT != '' AND APPROVAL_DT IS NOT NULL THEN '승인완료' ELSE '' END	AS APPROVAL_STATUS
			,		A.REG_DT			AS REQ_DT
			,		A.APPROVAL_DT
			,		A.REG_DT
			FROM	cm.CM_RCS_BRAND A
			WHERE	A.PROJECT_ID = #{projectId}
			AND		A.BRAND_INFO != ''
		) AA
		ORDER BY AA.REG_DT DESC
	</select>
	
	
	<select id="selectRcsRegTmpltList" resultType="camel">
		/* channel.selectRcsRegTmpltList */
		SELECT	MESSAGEBASE_ID
		,		MESSAGEBASEFORM_ID
		,		BRAND_ID
		,		CORP_ID
		,		TMPLT_NAME
		,		PRODUCT_CODE
		,		MESSAGEBASE_INFO
		,		APPROVAL_STATUS
		,		REG_ID
		,		UPD_ID
		,		USE_YN
		,		REG_DT
		,		UPD_DT
		,		APPROVAL_DT
		FROM	cm.CM_RCS_MSGBASE
		WHERE	BRAND_ID = #{brandId}
	</select>
	
	<select id="selectRcsCallbackList" resultType="camel">
		/* channel.selectRcsCallbackList */
		SELECT	CHATBOT_ID
		,		BRAND_ID
		,		CORP_ID
		,		SVC_TYPE
		,		CHATBOT_INFO
		,		APPROVAL_STATUS
		,		USE_YN
		,		REG_DT
		,		UPD_DT
		,		APPROVAL_DT
		FROM	CM_RCS_CHATBOT
		WHERE	BRAND_ID = #{brandId}
	</select>
	
	<insert id="insertRcsReqTemp">
		/* channel.insertRcsReqTemp */
		INSERT cm.CM_RCS_BRAND_REQ (
			YM
		,	BRAND_ID
		,	BRAND_REQ_KEY
		,	CORP_ID
		,	PROJECT_ID
		,	INCOMING_TYPE
		,	PROC_TYPE
		,	BRAND_NAME
		,	BRAND_DESC
		,	CATEGORY_ID
		,	SUB_CATEGORY_ID
		,	BRAND_INFO
		,	REG_DT
		,	BRAND_KEY
		,	APPROVAL_STATUS
		) VALUES
		(
			LAST_DAY(NOW() - interval 1 month) + interval 1 DAY 
		,	#{brandId}
		,	'TEMP'
		,	#{corpId}
		,	#{projectId}
		,	'Y'
		,	'Y'
		,	#{name}
		,	#{description}
		,	#{categoryId}
		,	#{subCategoryId}
		,	#{brandInfo}
		,	NOW()
		,	'BRAND_KEY'
		,	'TEMP'
		)
	</insert>
	
	<update id="updateRcsReqTemp">
		/* channel.updateRcsReqTemp */
		UPDATE	cm.CM_RCS_BRAND_REQ 
		SET		BRAND_NAME			= #{name}
		,		BRAND_DESC			= #{description}
		,		CATEGORY_ID			= #{categoryId}
		,		SUB_CATEGORY_ID		= #{subCategoryId}
		,		BRAND_INFO			= #{brandInfo}
		WHERE	BRAND_ID			= #{brandId}
	</update>
	
	<delete id="deleteRcsReqTemp">
		/* channel.deleteRcsReqTemp */
		DELETE FROM cm.CM_RCS_BRAND_REQ
		WHERE	BRAND_ID = #{brandId}
		AND		BRAND_REQ_KEY = 'TEMP'
	</delete>
	
	<delete id="deleteRcsChatbotReqTemp">
		/* channel.deleteRcsChatbotReqTemp */
		DELETE FROM cm.CM_RCS_CHATBOT_REQ
		WHERE	BRAND_ID = #{brandId}
		AND		CHATBOT_REQ_KEY = 'TEMP'
	</delete>
	
	<insert id="insertRcsChatbotReqTemp">
		/* channel.insertRcsChatbotReqTemp */
		INSERT	cm.CM_RCS_CHATBOT_REQ
		(
			YM
		,	CHATBOT_ID
		,	CHATBOT_REQ_KEY
		,	CORP_ID
		,	BRAND_ID
		,	INCOMING_TYPE
		,	PROC_TYPE
		,	SVC_TYPE
		,	CHATBOT_INFO
<!-- 		,	USE_YN -->
		,	REG_DT
		)
		VALUES
		(
			LAST_DAY(NOW() - interval 1 month) + interval 1 DAY 
		,	#{chatbotId}
		,	'TEMP'
		,	#{corpId}
		,	#{brandId}
		,	'C'
		,	'C'
		,	'a2p'
		,	#{chatbotInfo}
<!-- 		,	'Y' -->
		,	now()
		)
	</insert>
</mapper>