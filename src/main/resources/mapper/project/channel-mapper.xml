<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="channel">
	<select id="selectRcsBrandListCnt" resultType="int">
		/* channel.selectRcsBrandListCnt */
		SELECT	COUNT(1) AS CNT
		FROM	(
			<include refid="rcsBrandList"/>
		) AA
		ORDER BY AA.REG_DT DESC
	</select>
	<select id="selectRcsBrandList" resultType="camel">
		/* channel.selectRcsBrandList */
		SELECT	*
		FROM	(
			<include refid="rcsBrandList"/>
		) AA
		ORDER BY AA.REG_DT DESC
	</select>
	
	<sql id="rcsBrandList">
		SELECT	A.*
		,		IFNULL(CALLBACK_CNT.CNT, 0) AS CALLBACK_CNT
		FROM 	(
				SELECT	BRAND.*
				,		case @vData when BRAND_ID then @vRank := @vRank + 1 else @vRank := 1 end AS RANKING
				,		(@vData:=BRAND_ID) AS vData
				FROM	(
						select	'BRAND' AS TB_NAME
						,		A.BRAND_ID 
						,		A.PROJECT_ID  
						,		A.CORP_ID 
						,		A.BRAND_NAME
						,		'' as BRAND_DESC
						,		A.BRAND_INFO
						,		CASE
									WHEN A.PROJECT_ID = 'ALL' THEN 'Y'
									ELSE 'N'
								END AS OTHER_PROJECT_USE_YN
						,		( 	SELECT	COUNT(MESSAGEBASE_ID) 
									FROM	cm_console.CM_RCS_TMP_MSGBASE
									WHERE	BRAND_ID  = A.BRAND_ID 
								) AS TMPL_CNT
						,		CASE WHEN A.APPROVAL_DT != '' AND APPROVAL_DT IS NOT NULL THEN '승인' ELSE '' END	AS APPROVAL_STATUS		
						,		case when A.UPD_DT is null or A.UPD_DT='' then A.REG_DT else A.UPD_DT end AS REG_DT
						,		date_format(A.REG_DT, '%Y-%m-%d') AS REQ_DT
						,		date_format(A.APPROVAL_DT, '%Y-%m-%d') AS APPROVAL_DT
						,		'' AS MAIN_MDN
						,		'' AS MAIN_TITLE
						<![CDATA[
						,		CASE
									WHEN A.APPROVAL_DT > A.REG_DT	THEN A.APPROVAL_DT
									WHEN A.APPROVAL_DT > A.UPD_DT	THEN A.APPROVAL_DT
									WHEN A.UPD_DT > A.REG_DT		THEN A.UPD_DT
									ELSE A.REG_DT
								END AS RANKING_DT 
						]]>
						from 	cm.CM_RCS_BRAND A
						WHERE 	A.CORP_ID = #{corpId}
						and		(A.PROJECT_ID = #{projectId} OR A.PROJECT_ID = 'ALL' )
						
						UNION ALL
						
						select	'BRAND_REQ' AS TB_NAME
						,		A.BRAND_ID
						,		A.PROJECT_ID  
						,		A.CORP_ID 
						,		A.BRAND_NAME
						,		A.BRAND_DESC
						,		A.BRAND_INFO
						,		CASE
									WHEN A.PROJECT_ID = 'ALL' THEN 'Y'
									ELSE 'N'
								END AS OTHER_PROJECT_USE_YN
						,		( 	SELECT	COUNT(MESSAGEBASE_ID) 
									FROM	cm_console.CM_RCS_TMP_MSGBASE
									WHERE	BRAND_ID  = A.BRAND_ID 
								) AS TMPL_CNT
						,		A.APPROVAL_STATUS
						,		A.REG_DT
						,		'' AS REQ_DT
						,		'' AS APPROVAL_DT
						,		B.MAIN_MDN
						,		B.MAIN_TITLE
						,		A.REG_DT AS RANKING_DT
						from 	cm.CM_RCS_BRAND_REQ A
						left outer join (
							SELECT	crcr.BRAND_ID 
							,		REPLACE(JSON_EXTRACT(crcr.CHATBOT_INFO , '$.mdn[0]'), "\"", "") as MAIN_MDN
							,		REPLACE(JSON_EXTRACT(crcr.CHATBOT_INFO , '$.subTitle[0]'), "\"", "") as MAIN_TITLE
							FROM cm.CM_RCS_CHATBOT_REQ crcr 
							where JSON_EXTRACT(crcr.CHATBOT_INFO , '$.isMainNum[0]') = true
						) B
							ON A.BRAND_ID = B.BRAND_ID
						WHERE 	A.CORP_ID = #{corpId}
						and		(A.PROJECT_ID = #{projectId} OR A.PROJECT_ID = 'ALL' )
				) BRAND, (SELECT @vRank:=0, @vData:='') as r
				ORDER BY BRAND.BRAND_ID, BRAND.RANKING_DT DESC
		) A
		LEFT OUTER JOIN (
			select BRAND_ID 
			,		COUNT(1) AS CNT
			from (
				SELECT	*
				FROM 	(
						SELECT	CHATBOT.*
						,		case @vData when CHATBOT_ID then @vRank := @vRank + 1 else @vRank := 1 end AS RANKING
						,		(@vData:=CHATBOT_ID) AS vData
						FROM	(
							select	crcr.CHATBOT_ID
							,		crcr.CHATBOT_ID AS MAIN_MDN
							,		REPLACE(JSON_EXTRACT(crcr.CHATBOT_INFO , '$.subTitle[0]'), "\"", "") AS MAIN_TITLE
							,		crcr.REG_DT
							,		crcr.BRAND_ID 
							,		crcr.REG_DT AS RANKING_DT
							from cm.CM_RCS_CHATBOT_REQ crcr
							where crcr.CHATBOT_ID not in (
								select	crc.CHATBOT_ID
								from cm.CM_RCS_CHATBOT crc 
							)
							
							UNION 
							
							select	crc.CHATBOT_ID
							,		crc.CHATBOT_ID AS MAIN_MDN
							,		REPLACE(JSON_EXTRACT(crc.CHATBOT_INFO , '$.subTitle[0]'), "\"", "") AS MAIN_TITLE
							,		crc.REG_DT
							,		crc.BRAND_ID 
							<![CDATA[
							,		CASE
										WHEN crc.APPROVAL_DT > crc.REG_DT	THEN crc.APPROVAL_DT
										WHEN crc.APPROVAL_DT > crc.UPD_DT	THEN crc.APPROVAL_DT
										WHEN crc.UPD_DT > crc.REG_DT		THEN crc.UPD_DT
										ELSE crc.REG_DT
									END AS RANKING_DT 
							]]>
							from cm.CM_RCS_CHATBOT crc 
						) CHATBOT, (SELECT @vRank:=0, @vData:='') as r
						ORDER BY CHATBOT.CHATBOT_ID, CHATBOT.RANKING_DT DESC
				) A
				WHERE	RANKING = 1  
			) CHATBOT_RANK
			GROUP BY CHATBOT_RANK.BRAND_ID
		) CALLBACK_CNT
			ON A.BRAND_ID = CALLBACK_CNT.BRAND_ID
		WHERE	RANKING = 1
		<if test=" srcBrandText != null and srcBrandText != '' ">
			<choose>
				<when test="srcBrandType == 'brandId'.toString()">
					AND		A.BRAND_ID = #{srcBrandText}
				</when>
				<when test="srcBrandType == 'brandName'.toString()">
					AND		A.BRAND_NAME = #{srcBrandText}
				</when>
			</choose>
		</if>
	</sql>
	
	<select id="selectRcsBrandChatbotList" resultType="camel">
		/* channel.selectRcsBrandChatbotList */
		SELECT	A.*
		FROM 	(
				SELECT	CHATBOT.*
				,		case @vData when CHATBOT_ID then @vRank := @vRank + 1 else @vRank := 1 end AS RANKING
				,		(@vData:=CHATBOT_ID) AS vData
				FROM	(
					select	crcr.CHATBOT_ID
					,		crcr.CHATBOT_ID AS MAIN_MDN
					,		REPLACE(JSON_EXTRACT(crcr.CHATBOT_INFO , '$.subTitle[0]'), "\"", "") AS MAIN_TITLE
					,		crcr.REG_DT
					,		crcr.REG_DT AS RANKING_DT
					from cm.CM_RCS_CHATBOT_REQ crcr 
					where BRAND_ID  = #{brandId}
					and REPLACE(JSON_EXTRACT(crcr.CHATBOT_INFO , '$.isMainNum[0]'), "\"", "") = 'true'
					and crcr.CHATBOT_ID not in (
						select	crc.CHATBOT_ID
						from cm.CM_RCS_CHATBOT crc 
						where BRAND_ID  = #{brandId}
						and REPLACE(JSON_EXTRACT(crc.CHATBOT_INFO , '$.isMainNum[0]'), "\"", "") = 'true'
					)
					
					UNION 
					
					select	crc.CHATBOT_ID
					,		crc.CHATBOT_ID AS MAIN_MDN
					,		REPLACE(JSON_EXTRACT(crc.CHATBOT_INFO , '$.subTitle[0]'), "\"", "") AS MAIN_TITLE
					,		crc.REG_DT
					<![CDATA[
					,		CASE
								WHEN crc.APPROVAL_DT > crc.REG_DT	THEN crc.APPROVAL_DT
								WHEN crc.APPROVAL_DT > crc.UPD_DT	THEN crc.APPROVAL_DT
								WHEN crc.UPD_DT > crc.REG_DT		THEN crc.UPD_DT
								ELSE crc.REG_DT
							END AS RANKING_DT 
					]]>
					from cm.CM_RCS_CHATBOT crc 
					where BRAND_ID  = #{brandId}
					and REPLACE(JSON_EXTRACT(crc.CHATBOT_INFO , '$.isMainNum[0]'), "\"", "") = 'true'
				) CHATBOT, (SELECT @vRank:=0, @vData:='') as r
				ORDER BY CHATBOT.CHATBOT_ID, CHATBOT.RANKING_DT DESC
		) A
		WHERE	RANKING = 1
	</select>
	
	<select id="selectRcsRegTmpltList" resultType="camel">
		/* channel.selectRcsRegTmpltList */
		SELECT	MESSAGEBASE_ID
		,		MESSAGEBASEFORM_ID
		,		BRAND_ID
		,		CORP_ID
		,		TMPLT_NAME
		,		PRODUCT_CODE
		,		MESSAGEBASE_INFO
		,		APPROVAL_STATUS
		,		REG_ID
		,		UPD_ID
		,		USE_YN
		,		REG_DT
		,		UPD_DT
		,		APPROVAL_DT
		FROM	cm.CM_RCS_MSGBASE
		WHERE	BRAND_ID = #{brandId}
	</select>
	
	<select id="selectRcsCallbackList" resultType="camel">
		/* channel.selectRcsCallbackList */
		SELECT	CHATBOT_ID
		,		BRAND_ID
		,		CORP_ID
		,		SVC_TYPE
		,		CHATBOT_INFO
		,		APPROVAL_STATUS
		,		USE_YN
		,		REG_DT
		,		UPD_DT
		,		APPROVAL_DT
		FROM	cm.CM_RCS_CHATBOT
		WHERE	BRAND_ID = #{brandId}
	</select>
	
	<insert id="insertRcsReqTemp">
		/* channel.insertRcsReqTemp */
		INSERT cm.CM_RCS_BRAND_REQ (
			YM
		,	BRAND_ID
		,	BRAND_REQ_KEY
		,	CORP_ID
		,	PROJECT_ID
		,	INCOMING_TYPE
		,	PROC_TYPE
		,	BRAND_NAME
		,	BRAND_DESC
		,	CATEGORY_ID
		,	SUB_CATEGORY_ID
		,	BRAND_INFO
		,	REG_DT
		,	BRAND_KEY
		,	APPROVAL_STATUS
		) VALUES
		(
			LAST_DAY(NOW() - interval 1 month) + interval 1 DAY 
		,	#{brandId}
		,	'TEMP'
		,	#{corpId}
		,	#{projectId}
		,	'Y'
		,	'Y'
		,	#{name}
		,	#{description}
		,	#{categoryId}
		,	#{subCategoryId}
		,	#{brandInfo}
		,	NOW()
		,	'BRAND_KEY'
		,	'TEMP'
		)
	</insert>
	
	<update id="updateRcsReqTemp">
		/* channel.updateRcsReqTemp */
		UPDATE	cm.CM_RCS_BRAND_REQ 
		SET		BRAND_NAME			= #{name}
		,		BRAND_DESC			= #{description}
		,		CATEGORY_ID			= #{categoryId}
		,		SUB_CATEGORY_ID		= #{subCategoryId}
		,		BRAND_INFO			= #{brandInfo}
		WHERE	BRAND_ID			= #{brandId}
	</update>
	
	<delete id="deleteRcsReqTemp">
		/* channel.deleteRcsReqTemp */
		DELETE FROM cm.CM_RCS_BRAND_REQ
		WHERE	BRAND_ID = #{brandId}
		AND		BRAND_REQ_KEY = 'TEMP'
	</delete>
	
	<delete id="deleteRcsChatbotReqTemp">
		/* channel.deleteRcsChatbotReqTemp */
		DELETE FROM cm.CM_RCS_CHATBOT_REQ
		WHERE	BRAND_ID = #{brandId}
		AND		CHATBOT_REQ_KEY = 'TEMP'
	</delete>
	
	<insert id="insertRcsChatbotReqTemp">
		/* channel.insertRcsChatbotReqTemp */
		INSERT	cm.CM_RCS_CHATBOT_REQ
		(
			YM
		,	CHATBOT_ID
		,	CHATBOT_REQ_KEY
		,	CORP_ID
		,	BRAND_ID
		,	INCOMING_TYPE
		,	PROC_TYPE
		,	SVC_TYPE
		,	CHATBOT_INFO
<!-- 		,	USE_YN -->
		,	REG_DT
		)
		VALUES
		(
			LAST_DAY(NOW() - interval 1 month) + interval 1 DAY 
		,	#{chatbotId}
		,	'TEMP'
		,	#{corpId}
		,	#{brandId}
		,	'C'
		,	'C'
		,	'a2p'
		,	#{chatbotInfo}
<!-- 		,	'Y' -->
		,	now()
		)
	</insert>
	
	
	<select id="selectPushManageList" resultType="camel">
		/* channel.selectPushManageList */
		SELECT	A.APP_ID
		,		A.APP_NM
		,		A.CORP_ID
		,		A.PROJECT_ID
		,		CASE 
					WHEN A.PROJECT_ID = 'ALL' THEN 'Y'
					ELSE 'N'
				END AS OTHER_PROJECT_YN
		,		A.SERVICE_STATUS
		,		CASE
					WHEN A.FCM_SERVER_KEY != '' THEN 'Y'
					ELSE 'N'
				END AS FCM_YN
		,		A.FCM_PACKAGE_NAME
		,		A.FCM_SERVER_KEY
		,		A.SENDER_ID
		,		CASE
					WHEN A.APNS_FILE_NAME != '' THEN 'Y'
					ELSE 'N'
				END AS APNS_YN
		,		A.APNS_CETIFICATION
		,		A.APNS_FILE_NAME
		,		A.IOS_APP_ID
		,		A.TEAM_KEY
		,		A.KEY_ID
		,		A.TYPE
		,		A.REG_ID
		,		date_format(A.REG_DT, '%Y-%m-%d') AS REG_DT
		,		A.MOD_ID
		,		A.MOD_DT
		FROM	cm_push.T_PUSH_CONFIG A 
		WHERE	1 = 1
		AND		( A.PROJECT_ID = #{projectId} OR A.PROJECT_ID = 'ALL' )
		AND		A.CORP_ID	= #{corpId}
	</select>
	
	<select id="selectPushManageListCnt" resultType="int">
		/* channel.selectPushManageList */
		SELECT	COUNT(1) AS CNT
		FROM	cm_push.T_PUSH_CONFIG A 
		WHERE	1 = 1
		AND		( A.PROJECT_ID = #{saveProjectId} OR A.PROJECT_ID = 'ALL' )
		AND		A.CORP_ID	= #{corpId}
	</select>
	
	<insert id="insertPushManage">
		/* channel.insertPushManage */
		INSERT cm_push.T_PUSH_CONFIG
		(
			APP_ID
		,	APP_NM
		,	CORP_ID
		,	PROJECT_ID
		,	SERVICE_STATUS
		,	FCM_PACKAGE_NAME
		,	FCM_SERVER_KEY
		,	SENDER_ID
		,	APNS_CETIFICATION
		,	APNS_FILE_NAME
		,	IOS_APP_ID
		,	TEAM_KEY
		,	KEY_ID
		,	REG_ID
		,	REG_DT
		)
		VALUES
		(
			#{appId}
		,	#{appNm}
		,	#{corpId}
		,	#{projectId}
<!-- 		,	#{serviceStatus} -->
		,	'ON'
		,	#{fcmPackageName}
		,	#{fcmServerKey}
		,	#{senderId}
		,	#{apnsCetificationByteArray}
		,	#{apnsFileName}
		,	#{iosAppId}
		,	#{teamKey}
		,	#{keyId}
		,	#{userId}
		,	NOW()
		)
	</insert>
	
	<update id="updatePushManage">
	/* channel.updatePushManage */
		UPDATE	cm_push.T_PUSH_CONFIG
		SET		APP_NM				= #{appNm}
		,		FCM_PACKAGE_NAME	= #{fcmPackageName}
		,		FCM_SERVER_KEY		= #{fcmServerKey}
		,		SENDER_ID			= #{senderId}
		<if test=" apnsCetificationByteArray != null and apnsCetificationByteArray != '' ">
		,		APNS_CETIFICATION	= #{apnsCetificationByteArray}
		,		APNS_FILE_NAME		= #{apnsFileName}
		</if>
		,		IOS_APP_ID			= #{iosAppId}
		,		TEAM_KEY			= #{teamKey}
		,		MOD_ID				= #{userId}
		,		MOD_DT				= NOW()
		WHERE	APP_ID				= #{appId}
		AND		PROJECT_ID			= #{projectId}
		AND		CORP_ID				= #{corpId}
	</update>
	
	<delete id="deletePushManage">
	/* channel.deletePushManage */
		DELETE	FROM cm_push.T_PUSH_CONFIG
		WHERE	APP_ID		= #{appId}
		AND		CORP_ID		= #{corpId}
	</delete>
	
	<select id="selectRcsBrandMsgBaseList" resultType="camel">
	/* channel.selectRcsBrandMsgBaseList */
		SELECT	MESSAGEBASEFORM_ID
		,		TMPLT_NAME
		,		CARD_TYPE
		,		PRODUCT_CODE
		,		MESSAGEBASE_INFO
		FROM	cm.CM_RCS_MSGBASE CRM 
		WHERE	CRM.BRAND_ID ='common'
		ORDER BY REG_DT DESC
	</select>
	
	<select id="selectMoCallbackListCnt" resultType="int">
	/* channel.selectMoCallbackListCnt */
		SELECT	COUNT(1) AS CNT
		FROM	cm.CM_MO_CALLBACK A
		WHERE	(PROJECT_ID = #{projectId} OR PROJECT_ID = 'ALL' )
		AND		A.CORP_ID = #{corpId}
	</select>
	
	<select id="selectMoCallbackList" resultType="camel">
	/* channel.selectMoCallbackList */
		SELECT	A.MO_NUMBER
		,		A.API_KEY
		,		A.MO_TYPE
		,		A.PROJECT_ID
		,		CASE
					WHEN A.PROJECT_ID = 'ALL' THEN 'Y'
					ELSE 'N'
				END AS PROJECT_ID_YN
		,		A.USE_YN
		,		date_format(A.REG_DT, '%Y-%m-%d') AS REG_DT
		,		date_format(A.UPD_DT, '%Y-%m-%d') AS UPD_DT
		,		A.WEBHOOK_URL
		FROM	cm.CM_MO_CALLBACK A
		WHERE	(PROJECT_ID = #{projectId} OR PROJECT_ID = 'ALL' )
		AND		A.CORP_ID = #{corpId}
	</select>
	
	<insert id="insertMoCallback">
		/* channel.insertMoCallback */
		INSERT	cm.CM_MO_CALLBACK
		(
			MO_NUMBER
		,	API_KEY
		,	CORP_ID
		,	MO_TYPE
		,	PROJECT_ID
		,	USE_YN
		,	REG_DT
		)
		VALUES
		(
			#{moNumber}
		,	#{apiKey}
		,	#{corpId}
		,	#{moType}
		,	#{projectId}
		,	'Y'
		,	NOW()
		)
	</insert>
	
	<update id="updateMoCallback">
	/* channel.updateMoCallback */
		UPDATE	cm.CM_MO_CALLBACK
		SET		MO_TYPE		= #{moType}
		,		PROJECT_ID	= #{projectId}
		WHERE	MO_NUMBER	= #{moNumber}
		AND		API_KEY		= #{apiKey}
	</update>
	
	<delete id="deleteMoCallback">
	/* channel.deleteMoCallback */
		DELETE FROM cm.CM_MO_CALLBACK
		WHERE	MO_NUMBER	= #{moNumber}
		AND		API_KEY		= #{apiKey}
	</delete>
	
	<select id="selectRcsBrandListCallbackList" resultType="camel">
		/* channel.selectRcsBrandListCallbackList */
		SELECT	*
		FROM	(
		
			SELECT	CALLBACK_CNT.*
			FROM 	(
				SELECT	BRAND.*
				,		case @vData when BRAND_ID then @vRank := @vRank + 1 else @vRank := 1 end AS RANKING
				,		(@vData:=BRAND_ID) AS vData
				FROM	(
						select	'BRAND' AS TB_NAME
						,		A.BRAND_ID 
						,		A.PROJECT_ID  
						,		A.CORP_ID 
						,		A.BRAND_NAME
						,		'' as BRAND_DESC
						,		A.BRAND_INFO
						,		CASE
									WHEN A.PROJECT_ID = 'ALL' THEN 'Y'
									ELSE 'N'
								END AS OTHER_PROJECT_USE_YN
						,		( 	SELECT	COUNT(MESSAGEBASE_ID) 
									FROM	cm_console.CM_RCS_TMP_MSGBASE
									WHERE	BRAND_ID  = A.BRAND_ID 
								) AS TMPL_CNT
						,		CASE WHEN A.APPROVAL_DT != '' AND APPROVAL_DT IS NOT NULL THEN '승인' ELSE '' END	AS APPROVAL_STATUS		
						,		case when A.UPD_DT is null or A.UPD_DT='' then A.REG_DT else A.UPD_DT end AS REG_DT
						,		date_format(A.REG_DT, '%Y-%m-%d') AS REQ_DT
						,		date_format(A.APPROVAL_DT, '%Y-%m-%d') AS APPROVAL_DT
						,		'' AS MAIN_MDN
						,		'' AS MAIN_TITLE
						<![CDATA[
						,		CASE
									WHEN A.APPROVAL_DT > A.REG_DT	THEN A.APPROVAL_DT
									WHEN A.APPROVAL_DT > A.UPD_DT	THEN A.APPROVAL_DT
									WHEN A.UPD_DT > A.REG_DT		THEN A.UPD_DT
									ELSE A.REG_DT
								END AS RANKING_DT 
						]]>
						from 	cm.CM_RCS_BRAND A
						WHERE 	A.CORP_ID = #{corpId}
						and		(A.PROJECT_ID = #{projectId} OR A.PROJECT_ID = 'ALL' )
		
						UNION ALL
		
						select	'BRAND_REQ' AS TB_NAME
						,		A.BRAND_ID
						,		A.PROJECT_ID  
						,		A.CORP_ID 
						,		A.BRAND_NAME
						,		A.BRAND_DESC
						,		A.BRAND_INFO
						,		CASE
									WHEN A.PROJECT_ID = 'ALL' THEN 'Y'
									ELSE 'N'
								END AS OTHER_PROJECT_USE_YN
						,		( 	SELECT	COUNT(MESSAGEBASE_ID) 
									FROM	cm_console.CM_RCS_TMP_MSGBASE
									WHERE	BRAND_ID  = A.BRAND_ID 
								) AS TMPL_CNT
						,		A.APPROVAL_STATUS
						,		A.REG_DT
						,		'' AS REQ_DT
						,		'' AS APPROVAL_DT
						,		B.MAIN_MDN
						,		B.MAIN_TITLE
						,		A.REG_DT AS RANKING_DT 
						from 	cm.CM_RCS_BRAND_REQ A
						left outer join (
							SELECT	crcr.BRAND_ID 
							,		REPLACE(JSON_EXTRACT(crcr.CHATBOT_INFO , '$.mdn[0]'), "\"", "") as MAIN_MDN
							,		REPLACE(JSON_EXTRACT(crcr.CHATBOT_INFO , '$.subTitle[0]'), "\"", "") as MAIN_TITLE
							FROM cm.CM_RCS_CHATBOT_REQ crcr 
							where JSON_EXTRACT(crcr.CHATBOT_INFO , '$.isMainNum[0]') = true
						) B
							ON A.BRAND_ID = B.BRAND_ID
						WHERE 	A.CORP_ID = #{corpId}
						and		(A.PROJECT_ID = #{projectId} OR A.PROJECT_ID = 'ALL' )
				) BRAND, (SELECT @vRank:=0, @vData:='') as r
				ORDER BY BRAND.BRAND_ID, BRAND.RANKING_DT DESC
			) A
			LEFT OUTER JOIN (
				select *
				from (
					SELECT	*
					FROM 	(
							SELECT	CHATBOT.*
							,		case @vData when CHATBOT_ID then @vRank := @vRank + 1 else @vRank := 1 end AS CHANBOT_RANKING
							,		(@vData:=CHATBOT_ID) AS vData
							FROM	(
								select	crcr.CHATBOT_ID
								,		crcr.CHATBOT_ID AS MAIN_MDN
								,		REPLACE(JSON_EXTRACT(crcr.CHATBOT_INFO , '$.subTitle[0]'), "\"", "") AS MAIN_TITLE
								,		CASE
											WHEN REPLACE(JSON_EXTRACT(crcr.CHATBOT_INFO , '$.rcsReply[0]'), "\"", "") = 1 THEN '예'
											ELSE '아니오'
										END AS RCS_REPLY_TEXT
								,		REPLACE(JSON_EXTRACT(crcr.CHATBOT_INFO , '$.rcsReply[0]'), "\"", "")  AS RCS_REPLY
								,		crcr.BRAND_ID 
								,		crcr.APPROVAL_STATUS 
								,		date_format(crcr.REG_DT, '%Y-%m-%d') AS REG_DT
								,		date_format(crcr.APPROVAL_DT, '%Y-%m-%d') AS APPROVAL_DT
								from cm.CM_RCS_CHATBOT_REQ crcr
								where crcr.CHATBOT_ID not in (
									select	crc.CHATBOT_ID
									from cm.CM_RCS_CHATBOT crc 
								)
			
								UNION 
			
								select	crc.CHATBOT_ID
								,		crc.CHATBOT_ID AS MAIN_MDN
								,		REPLACE(JSON_EXTRACT(crc.CHATBOT_INFO , '$.subTitle[0]'), "\"", "") AS MAIN_TITLE
								,		CASE
											WHEN REPLACE(JSON_EXTRACT(crc.CHATBOT_INFO , '$.rcsReply[0]'), "\"", "") = 1 THEN '예'
											ELSE '아니오'
										END AS RCS_REPLY_TEXT
								,		REPLACE(JSON_EXTRACT(crc.CHATBOT_INFO , '$.rcsReply[0]'), "\"", "")  AS RCS_REPLY
								,		crc.BRAND_ID 
								,		crc.APPROVAL_STATUS 
								,		date_format(crc.REG_DT, '%Y-%m-%d') AS REG_DT
								,		date_format(crc.APPROVAL_DT, '%Y-%m-%d') AS APPROVAL_DT
								<![CDATA[
								,		CASE
											WHEN crc.APPROVAL_DT > crc.REG_DT	THEN crc.APPROVAL_DT
											WHEN crc.APPROVAL_DT > crc.UPD_DT	THEN crc.APPROVAL_DT
											WHEN crc.UPD_DT > crc.REG_DT		THEN crc.UPD_DT
											ELSE crc.REG_DT
										END AS RANKING_DT 
								]]>
								from cm.CM_RCS_CHATBOT crc 
							) CHATBOT, (SELECT @vRank:=0, @vData:='') as r
							ORDER BY CHATBOT.CHATBOT_ID, CHATBOT.RANKING_DT DESC
					) A
					WHERE	CHANBOT_RANKING = 1  
				) CHATBOT_RANK
			) CALLBACK_CNT
			ON A.BRAND_ID = CALLBACK_CNT.BRAND_ID
		WHERE	RANKING = 1
		and A.BRAND_ID = #{brandId}
		) AA
		
		ORDER BY AA.REG_DT DESC
	</select>
	
	<select id="selectApikeyForMoApi" resultType="String">
		/* channel.selectApikeyForMoApi */
		SELECT API_KEY
		FROM cm.CM_APIKEY ca 
		WHERE	ca.WEB_SENDER_YN = 'Y'
		AND		ca.PROJECT_ID = #{projectId}
		ORDER BY ca.REG_DT  DESC
		LIMIT 1
	</select>
	
	
</mapper>