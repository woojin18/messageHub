<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project">

	<select id="selectProjectList" resultType="camel">
		/* project.selectProjectList */
		SELECT	A.PROJECT_ID
		,		A.CORP_ID
		,		A.PROJECT_NAME
		,		A.PROJECT_DESC
		,		A.PAY_TYPE
		,		CASE 
					WHEN A.PAY_TYPE = 'PRE' AND A.NOPAY_YN != 'Y' THEN '선불'
					WHEN A.PAY_TYPE = 'POST' AND A.NOPAY_YN != 'Y' THEN '후불'
					WHEN A.NOPAY_YN = 'Y' THEN '무과금'
					ELSE ''
				END AS PAY_TYPE_NAME
		,		A.BILL_ID
		,		A.SMART_CH_CODE
		,		A.SUBBILL_YN
		,		date_format(A.REG_DT, '%Y-%m-%d') AS REG_DT
		,		A.UPD_DT
		,		A.USE_YN
		,		A.USE_CH_GRP_INFO
		,		A.RESEND_TITLE
		,		A.NOPAY_YN
		,		A.SUBBILL_YN
		,		date_format(A.SUBBILL_START_DAY, '%Y-%m-%d') as SUBBILL_START_DAY
		,		( SELECT COUNT(USER_ID) FROM cm_console.CM_PROJECT_USER WHERE PROJECT_ID = A.PROJECT_ID ) AS PROJECT_MEMBER_CNT
		FROM	cm_console.CM_PROJECT A
		<if test="roleCd != 'OWNER'.toString()">
		INNER JOIN cm_console.CM_PROJECT_USER B
			ON A.PROJECT_ID = B.PROJECT_ID
			AND		B.USER_ID = #{loginId}
		</if>
		WHERE	1=1
		AND		A.DEL_YN != 'Y'
		AND		A.CORP_ID = #{corpId}
		<if test="srcProjectName != '' and srcProjectName != null ">
		AND A.PROJECT_NAME LIKE CONCAT('%', #{srcProjectName}, '%')
		</if>
		<if test="srcUseYn != '' and srcUseYn != null ">
		AND A.USE_YN = #{srcUseYn}
		</if>
		<if test="detailProjectId != '' and detailProjectId != null ">
		AND A.PROJECT_ID = #{detailProjectId}
		</if>
		ORDER BY A.REG_DT DESC
	</select>
	
	<select id="checkProjectNameDuplicate" resultType="int">
		/* project.checkProjectNameDuplicate */
		SELECT	COUNT(PROJECT_ID) AS CNT
		FROM	cm_console.CM_PROJECT
		WHERE	PROJECT_NAME = #{checkProjectName}
	</select>
	
	<select id="selectProjectMaxId" resultType="int">
		/* project.selectProjectMaxId */
		SELECT	MAX(PROJECT_ID) + 1 AS project_max_id
		FROM	cm_console.CM_PROJECT
	</select>
	
	<insert id="insertProject">
		/* project.insertProject */
		INSERT cm_console.CM_PROJECT
		(
			PROJECT_ID
		,	CORP_ID
		,	PROJECT_NAME
		,	PROJECT_DESC
		,	PAY_TYPE
		,	BILL_ID
		,	SMART_CH_CODE
		,	USE_CH_GRP_INFO
		,	RESEND_TITLE
		,	SUBBILL_YN
		,	SUBBILL_START_DAY
		,	NOPAY_YN
		,	REG_ID
		,	REG_DT
		,	UPD_ID
		,	UPD_DT
		,	USE_YN
		,	DEL_YN
		,	SERVICE_ID
		)
		VALUES
		(
			#{projectId}
		,	#{corpId}
		,	#{projectName}
		,	#{projectDesc}
		,	#{payType}
		,	#{billId}
		,	''
		,	#{jsonInfo}
		,	#{resendTitle}
		,	#{subbillYn}
		,	REPLACE(#{subbillStartDay}, '-', '')
		,	'N'
		,	#{userId}
		,	NOW()
		,	#{userId}
		,	NOW()
		,	#{useYn}
		,	'N'
		,	#{serviceId}
		)
	</insert>
	
	<update id="updateProject">
		/* project.updateProject */
		UPDATE	cm_console.CM_PROJECT
		SET		PROJECT_NAME		= #{projectName}
		,		PROJECT_DESC		= #{projectDesc}
		,		USE_CH_GRP_INFO		= #{jsonInfo}
		,		RESEND_TITLE		= #{resendTitle}
		,		SUBBILL_YN			= #{subbillYn}
		,		SUBBILL_START_DAY	= REPLACE(#{subbillStartDay}, '-', '')
		,		USE_YN				= #{useYn}
		,		UPD_ID				= #{userId}
		,		UPD_DT				= NOW()
		WHERE	PROJECT_ID			= #{projectId}
	</update>
	
	<update id="updateProjectBillId">
		/* project.updateProjectBillId */
		UPDATE	cm_console.CM_PROJECT
		SET		BILL_ID = #{billId}
		,		UPD_DT	= NOW()
		,		UPD_ID				= #{userId}
		WHERE	PROJECT_ID = #{projectId}
	</update>
	
	<select id="selectProjectOwnerUser" resultType="camel">
		/* project.selectProjectOwnerUser */
		SELECT * 
		FROM cm_console.CM_CORP CC
		INNER JOIN cm_console.CM_USER CU 
			ON CC.CORP_ID  = CU.CORP_ID 
		WHERE	CC.CORP_ID = #{corpId}
		AND		CU.ROLE_CD = 'OWNER'
	</select>
	
	<insert id="insertProjectUser">
		/* project.insertProjectUser */
		INSERT	cm_console.CM_PROJECT_USER
		(
			PROJECT_ID
		,	CORP_ID
		,	USER_ID
		,	REG_ID
		,	REG_DT
		)
		VALUES
		(
			#{projectId}
		,	#{corpId}
		,	#{userId}
		,	#{userId}
		,	NOW()
		)
	</insert>
	
	<select id="selectApikeyMaxId" resultType="int">
		/* project.selectApikeyMaxId */
		SELECT	IFNULL(MAX(API_KEY),0) + 1 AS api_max_id
		FROM	cm.CM_APIKEY
	</select>
	
	<delete id="deleteProject">
		/* project.deleteProject */
		UPDATE	cm_console.CM_PROJECT
		SET		DEL_YN = 'Y'
		WHERE	PROJECT_ID = #{projectId}
	</delete>
	
	<delete id="deleteProjectUser">
		/* project.deleteProjectUser */
		DELETE FROM cm_console.CM_PROJECT_USER
		WHERE	PROJECT_ID = #{projectId}
	</delete>
	
	<delete id="deleteProjectApiKey">
		/* project.deleteProjectApiKey */
		DELETE FROM cm.CM_APIKEY
		WHERE	PROJECT_ID = #{projectId}
	</delete>
	
	<select id="checkPreRegYn" resultType="string">
		/* project.checkPreRegYn */
		SELECT	CASE WHEN COUNT(CORP_ID) > 0 THEN 'Y' ELSE 'N' END AS PRE_REG_YN
		FROM	cm_console.CM_SPECIAL_BUSI CSB 
		WHERE	CORP_ID  = #{corpId}
	</select>
	
	<insert id="insertSpecualBusi">
		/* project.insertSpecualBusi */
		INSERT	CM_SPECIAL_BUSI
		(
			CORP_ID
		,	REQ_TYPE
		,	APPROVAL_STATUS
		,	ATTACH_FILE_LIST
		,	REG_ID
		,	REG_DT
		)
		VALUES
		(
			#{corpId}
		,	#{reqType}
		,	'REQ'
		,	#{attachFileList}
		,	#{loginId}
		,	now()
		)
	</insert>
	
	<sql id="callbackManage">
		SELECT	SUB_CB.*
		,		CRB.BRAND_NAME
		,		CRB.CORP_ID 
		FROM (
			SELECT	A.*
			FROM 	(
					SELECT	CHATBOT.*
					,		case @vData when CHATBOT_ID then @vRank := @vRank + 1 else @vRank := 1 end AS RANKING
					,		(@vData:=CHATBOT_ID) AS vData
					FROM	(
						select	crcr.CHATBOT_ID
						,		crcr.BRAND_ID
						,		REPLACE(JSON_EXTRACT(crcr.CHATBOT_INFO , '$.subTitle[0]'), "\"", "") AS SUB_TITLE
						,		CASE
									WHEN REPLACE(JSON_EXTRACT(crcr.CHATBOT_INFO , '$.rcsReply[0]'), "\"", "") = 1 THEN '예'
									ELSE '아니오'
								END AS RCS_REPLY_TEXT
						,		REPLACE(JSON_EXTRACT(crcr.CHATBOT_INFO , '$.rcsReply[0]'), "\"", "")  AS RCS_REPLY
						,		IFNULL(crcr.APPROVAL_STATUS, '삭제') AS APPROVAL_STATUS
						,		'Y' AS USE_YN
						,		DATE_FORMAT(crcr.REG_DT, '%Y-%m-%d %H:%i:%s') AS REG_DT
						,		'' AS APPROVAL_DT
						,		crcr.REG_DT AS RANKING_DT
						from cm.CM_RCS_CHATBOT_REQ crcr 
						where crcr.CORP_ID  = #{corpId}
						and crcr.CHATBOT_ID not in (
							select	crc.CHATBOT_ID
							from cm.CM_RCS_CHATBOT crc 
							where crc.CORP_ID  = #{corpId}
							and REPLACE(JSON_EXTRACT(crc.CHATBOT_INFO , '$.isMainNum[0]'), "\"", "") = 'true'
						)
						
						UNION ALL 
						
						select	crc.CHATBOT_ID
						,		crc.BRAND_ID
						,		REPLACE(JSON_EXTRACT(crc.CHATBOT_INFO , '$.subTitle[0]'), "\"", "") AS SUB_TITLE
						,		CASE
									WHEN REPLACE(JSON_EXTRACT(crc.CHATBOT_INFO , '$.rcsReply[0]'), "\"", "") = 1 THEN '예'
									ELSE '아니오'
								END AS RCS_REPLY_TEXT
						,		REPLACE(JSON_EXTRACT(crc.CHATBOT_INFO , '$.rcsReply[0]'), "\"", "")  AS RCS_REPLY
						,		crc.APPROVAL_STATUS
						,		crc.USE_YN
						,		DATE_FORMAT(crc.REG_DT, '%Y-%m-%d %H:%i:%s') AS REG_DT
						,		DATE_FORMAT(crc.APPROVAL_DT, '%Y-%m-%d %H:%i:%s') AS APPROVAL_DT
						<![CDATA[
						,		CASE
									WHEN crc.APPROVAL_DT > crc.REG_DT	THEN crc.APPROVAL_DT
									WHEN crc.APPROVAL_DT > crc.UPD_DT	THEN crc.APPROVAL_DT
									WHEN crc.UPD_DT > crc.REG_DT		THEN crc.UPD_DT
									ELSE crc.REG_DT
								END AS RANKING_DT 
						]]>
						from cm.CM_RCS_CHATBOT crc 
						where crc.CORP_ID  = #{corpId}
					) CHATBOT, (SELECT @vRank:=0, @vData:='') as r
					ORDER BY CHATBOT.CHATBOT_ID, CHATBOT.RANKING_DT DESC
			) A
			WHERE	RANKING = 1
		) SUB_CB
		INNER JOIN cm.CM_RCS_BRAND CRB
			ON SUB_CB.BRAND_ID = CRB.BRAND_ID
		WHERE 1 = 1
		AND		(CRB.PROJECT_ID = #{projectId} OR CRB.PROJECT_ID = 'ALL')
		<if test="srcBrandName != null and srcBrandName != ''">
		AND		CRB.BRAND_NAME LIKE CONCAT('%',#{srcBrandName},'%')
		</if>
		<if test="srcSubTitle != null and srcSubTitle != ''">
		AND		SUB_CB.SUB_TITLE LIKE CONCAT('%',#{srcSubTitle},'%')
		</if>
		<if test="srcChatbotId != null and srcChatbotId != ''">
		AND		SUB_CB.CHATBOT_ID LIKE CONCAT('%',#{srcChatbotId},'%')
		</if>
		<if test="srcRcsReply != null and srcRcsReply != ''">
		AND		SUB_CB.RCS_REPLY = #{srcRcsReply}
		</if>
		<if test="srcIsuse != null and srcIsuse != ''">
		AND		SUB_CB.USE_YN = #{srcIsuse}
		</if>
		<if test="srcApprovalStatus != null and srcApprovalStatus != ''">
		AND		SUB_CB.APPROVAL_STATUS = #{srcApprovalStatus}
		</if> 
		<if test="brandId != null and brandId != ''">
		AND		CRB.BRAND_ID = #{brandId}
		</if> 
	</sql>
	
	<select id="selectCallbackManageListCnt" resultType="int">
		/* project.selectCallbackManageListCnt */
		SELECT	COUNT(1) AS CNT
		FROM (
			<include refid="callbackManage"/>
		) CB
		
	</select>
	
	<select id="selectCallbackManageList" resultType="camel">
		/* project.selectCallbackManageList */
		SELECT	*
		,		@ROWNUM := @ROWNUM + 1 AS ROWNUM
		FROM (
			<include refid="callbackManage"/>
		) CB, (SELECT @ROWNUM:=0) TMP
		WHERE 1=1
		ORDER BY CB.REG_DT DESC
        <if test='pagingYn == "Y" '>
        LIMIT #{offset}, #{listSize}
        </if>
	</select>
	
	<select id="selectCallbackManageApprovalBrandList" resultType="camel">
		/* project.selectCallbackManageApprovalBrandList */
		SELECT	CRB.BRAND_NAME
		,		CRB.CORP_ID 
		,		CRB.BRAND_ID
		FROM cm.CM_RCS_BRAND CRB
		WHERE 1=1
		AND		CRB.CORP_ID  = #{corpId}
		AND		(CRB.PROJECT_ID = #{srcProjectId} OR CRB.PROJECT_ID = 'ALL')
		ORDER BY CRB.REG_DT DESC
	</select>
	
	<select id="selectCallbackManageDetail" resultType="camel">
		/* project.selectCallbackManageDetail */
		SELECT *
		FROM (
			<include refid="callbackManage"/>
		) CB
		WHERE	1=1
		AND		CB.CHATBOT_ID = #{chatbotId}
	</select>
	
	<select id="selectApprovalBrandList" resultType="camel">
		/* project.selectApprovalBrandList */
		SELECT	BRAND_ID
		,		BRANC_NAME
		FROM	cm.CM_RCS_BRAND crb
		WHERE	CORP_ID = {corpId}
		AND		APPROVAL_STATUS = '승인'
	</select>
	
		<select id="selectBasicDisRatio" parameterType="string" resultType="camel">
		/* project.selectBasicDisRatio */
		SELECT	RELAY_CH_TYPE 
		,		RELAY
		,		VENDOR_YN 
		FROM	cm.CM_RELAY_CH CRC 
		WHERE	MO_YN = 'N'
		AND		USE_YN = 'Y'
		GROUP BY RELAY_CH_TYPE, RELAY, VENDOR_YN
	</select>
	
	<select id="seletDisRatio" parameterType="string" resultType="camel">
		/* project.seletDisRatio */
		SELECT	CH_DIST_INFO
			,	USE_YN
			,	SMART_CH_NAME
		FROM	cm.CM_SMART_CH
		WHERE	1=1
		<if test="CORP_ID != '' and CORP_ID != null">
		AND		CORP_ID = #{CORP_ID}
		</if>
		<if test="SMART_CH_CODE != '' and SMART_CH_CODE != null">
		AND		SMART_CH_CODE = #{SMART_CH_CODE}
		</if>
	</select>
	
	<select id="selectDuplicateDistribution" resultType="int">
		/* project.selectDuplicateDistribution */
		SELECT	COUNT(1)
		FROM	cm.CM_SMART_CH
		WHERE	1 = 1
		AND		CORP_ID = #{CORP_ID}
		AND		SMART_CH_CODE = #{SMART_CH_CODE}
	</select>
	
	<update id="updateDistributionData">
		/* project.updateDistributionData */
		UPDATE	cm.CM_SMART_CH
		SET		SMART_CH_NAME 	= #{SMART_CH_NAME}
		,		CH_DIST_INFO	= #{CH_DIST_INFO}
		,		USE_YN			= #{USE_YN}
		,		UPD_DT			= NOW()
		WHERE	1=1
		AND		SMART_CH_CODE = #{SMART_CH_CODE}
		AND		PROJECT_ID = #{PROJECT_ID}
		AND		CORP_ID = #{CORP_ID}
	</update>

	<update id="updateProjectDistribution">
		/* project.updateProjectDistribution */
		UPDATE	cm_console.CM_PROJECT
		SET		SMART_CH_CODE = #{SMART_CH_CODE}
		,		UPD_DT				= NOW()
		,		UPD_ID				= #{userId}
		WHERE	1=1
		AND		PROJECT_ID = #{PROJECT_ID}
	</update>
	
	<insert id="insertDistributionData" parameterType="hashmap">
		/* project."insertDistributionData" */
		INSERT cm.CM_SMART_CH
		(
			SMART_CH_CODE
		,	CORP_ID
		,	SMART_CH_NAME
		,	CH_DIST_INFO
		,	USE_YN
		,	REG_DT
		,	PROJECT_ID
		)
		VALUES 
		(
			#{SMART_CH_CODE}
		,	#{CORP_ID}
		,	#{SMART_CH_NAME}
		,	#{CH_DIST_INFO}
		,	#{USE_YN}
		,	NOW()
		,	#{PROJECT_ID}
		)
	</insert>
	
	<select id="selectCmUcubeDupllicate" resultType="int">
		/* project.selectCmUcubeDupllicate */
		SELECT	COUNT(CORP_ID) AS CNT
		FROM	cm_console.CM_UCUBE
		WHERE	CORP_ID = #{corpId}
		AND		BILL_ID = #{billId}
	</select>
	
	<insert id="insertProjectCmUcube">
		/* project.insertProjectCmUcube */
		INSERT	cm_console.CM_UCUBE
		(
			CORP_ID
		,	BILL_ID
		,	UCUBE_INFO
		,	REG_DT
		)
		VALUSE
		(
			#{corpId}
		,	#{billId}
		,	UCUBE_INFO
		,	NOW()
		)
	</insert>
	
	<select id="selectCustNoForSaveProject" resultType="String">
		/* project.selectCustNoForSaveProject */
		SELECT	CUST_NO
		FROM	cm_console.CM_CORP
		WHERE	CORP_ID = #{corpId}
	</select>
	
	<select id="selectRegNoForSaveProject" resultType="String">
		/* project.selectRegNoForSaveProject */
		SELECT	REGNO
		FROM	cm_console.CM_CORP
		WHERE	CORP_ID = #{corpId}
	</select>
	
	
	<select id="selectSalesIdForSaveProject" resultType="String">
		/* project.selectSalesIdForSaveProject */
		SELECT	SALES_ID
		FROM	cm_console.CM_CORP
		WHERE	CORP_ID = #{corpId}
	</select>
	
	<select id="selectEmailForSaveProject" resultType="String">
		/* project.selectEmailForSaveProject */
		SELECT cu.LOGIN_ID 
		FROM cm_console.CM_CORP cc 
		INNER JOIN cm_console.CM_USER cu 
			ON cc.CORP_ID  = cu.CORP_ID 
		WHERE cu.ROLE_CD = 'OWNER'
		AND cc.CORP_ID  = #{corpId}
		LIMIT 1
	</select>
	
	
	<select id="selectDistDetail" resultType="camel">
		/* project.selectDistDetail */
		SELECT	B.DIST_ID 
		,		B.DIST_INFO
		,		B.DIS_NAME 
		FROM cm_console.CM_CORP A
		INNER JOIN cm.CM_DISTRIBUTION B
			ON A.DIST_ID = B.DIST_ID 
		WHERE	A.CORP_ID = #{corpId}
	</select>
	
	<select id="selectCorpDistId" resultType="String">
		/* project.selectCorpDistId */
		SELECT	DIST_ID
		FROM	cm_console.CM_CORP
		WHERE	CORP_ID = #{corpId}
	</select>
	
	<insert id="insertCmUcube">
		/* project.insertCmUcube */
		INSERT cm_console.CM_UCUBE
		(
			CORP_ID
		,	BILL_ID
		,	UCUBE_INFO
		,	REG_DT
		,	UPD_DT
		)
		VALUES
		(
			#{corpId}
		,	#{billId}
		,	#{ucubeInfo}
		,	NOW()
		,	NOW()
		)
	</insert>
	
	<select id="selectOwnerForApi" resultType="camel">
		/* project.selectOwnerForApi */
		SELECT	B.USER_NAME AS DAM_NM
		,		A.CORP_NAME AS DEPT_NM
		,		IFNULL(A.WIRE_TEL, B.HP_NUMBER) AS PHONE_NUM
		,		B.HP_NUMBER AS CELL_NUM
		,		IFNULL(A.WIRE_TEL, B.HP_NUMBER) AS FAX_NUM
		,		B.LOGIN_ID AS DAM_EMAIL
		FROM cm_console.CM_CORP A 
		INNER JOIN (
			SELECT *
			FROM cm_console.CM_USER cu 
			WHERE ROLE_CD  = 'OWNER'
			AND cu.CORP_ID = #{corpId}
		) B
		on A.CORP_ID  = B.CORP_ID
		WHERE A.CORP_ID = #{corpId}
		LIMIT 1
	</select>
	
</mapper>