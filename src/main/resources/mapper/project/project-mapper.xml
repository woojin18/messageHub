<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project">

	<select id="selectProjectList" resultType="camel">
		/* project.selectProjectList */
		SELECT	A.PROJECT_ID
		,		A.CORP_ID
		,		A.PROJECT_NAME
		,		A.PROJECT_DESC
		,		A.PAY_TYPE
		,		CASE 
					WHEN A.PAY_TYPE = 'Y' THEN '선불'
					WHEN A.PAY_TYPE = 'N' THEN '후불'
					ELSE ''
				END AS PAY_TYPE_NAME
		,		A.BILL_ID
		,		A.SMART_CH_CODE
		,		A.SUBBILL_YN
		,		A.SUBBILL_START_DAY
		,		date_format(A.REG_DT, '%Y-%m-%d') AS REG_DT
		,		A.UPD_DT
		,		A.USE_YN
		,		A.USE_CH_GRP_INFO
		,		A.RESEND_TITLE
		,		A.NOPAY_YN
		,		A.SUBBILL_YN
		,		date_format(A.SUBBILL_START_DAY, '%Y-%m-%d') as SUBBILL_START_DAY
		,		( SELECT COUNT(USER_ID) + 1 FROM cm_console.CM_PROJECT_USER WHERE PROJECT_ID = A.PROJECT_ID ) AS PROJECT_MEMBER_CNT
		,		REPLACE(JSON_EXTRACT(A.USE_CH_GRP_INFO, '$.RCS[0]'), "\"", "") AS RCS_YN
		,		REPLACE(JSON_EXTRACT(A.USE_CH_GRP_INFO, '$.SMSMMS[0]'), "\"", "") AS SMSMMS_YN
		,		REPLACE(JSON_EXTRACT(A.USE_CH_GRP_INFO, '$.PUSH[0]'), "\"", "") AS PUSH_YN
		,		REPLACE(JSON_EXTRACT(A.USE_CH_GRP_INFO, '$.KAKAO[0]'), "\"", "") AS KAKAO_YN
		,		REPLACE(JSON_EXTRACT(A.USE_CH_GRP_INFO, '$.MO[0]'), "\"", "") AS MO_YN
		FROM	cm_console.CM_PROJECT A
		INNER JOIN cm_console.CM_PROJECT_USER B
			ON A.PROJECT_ID = B.PROJECT_ID
		WHERE	1=1
		AND		A.DEL_YN != 'Y'
		<if test="roleCd != 'OWNER'.toString()">
		AND		B.USER_ID = #{loginId}
		</if>
		<if test="srcProjectName != '' and srcProjectName != null ">
		AND A.PROJECT_NAME LIKE CONCAT('%', #{srcProjectName}, '%')
		</if>
		<if test="srcUseYn != '' and srcUseYn != null ">
		AND A.USE_YN = #{srcUseYn}
		</if>
		ORDER BY A.PROJECT_ID DESC
	</select>
	
	<select id="checkProjectNameDuplicate" resultType="int">
		/* project.checkProjectNameDuplicate */
		SELECT	COUNT(PROJECT_ID) AS CNT
		FROM	cm_console.CM_PROJECT
		WHERE	PROJECT_NAME = #{checkProjectName}
	</select>
	
	<select id="selectProjectMaxId" resultType="int">
		/* project.selectProjectMaxId */
		SELECT	MAX(PROJECT_ID) + 1 AS project_max_id
		FROM	cm_console.CM_PROJECT
	</select>
	
	<insert id="insertProject">
		/* project.insertProject */
		INSERT cm_console.CM_PROJECT
		(
			PROJECT_ID
		,	CORP_ID
		,	PROJECT_NAME
		,	PROJECT_DESC
		,	PAY_TYPE
		,	BILL_ID
		,	SMART_CH_CODE
		,	USE_CH_GRP_INFO
		,	RESEND_TITLE
		,	SUBBILL_YN
		,	SUBBILL_START_DAY
		,	NOPAY_YN
		,	REG_DT
		,	USE_YN
		,	DEL_YN
		)
		VALUES
		(
			#{projectId}
		,	#{corpId}
		,	#{projectName}
		,	#{projectDesc}
		,	#{payType}
		,	'BILL_ID'
		,	''
		,	#{jsonInfo}
		,	#{resendTitle}
		,	#{subbillYn}
		,	REPLACE(#{subbillStartDay}, '-', '')
		,	'N'
		,	NOW()
		,	#{useYn}
		,	'N'
		)
	</insert>
	
	<update id="updateProject">
		/* project.updateProject */
		UPDATE	cm_console.CM_PROJECT
		SET		PROJECT_NAME		= #{projectName}
		,		PROJECT_DESC		= #{projectDesc}
		,		USE_CH_GRP_INFO		= #{jsonInfo}
		,		RESEND_TITLE		= #{resendTitle}
		,		SUBBILL_YN			= #{subbillYn}
		,		SUBBILL_START_DAY	= REPLACE(#{subbillStartDay}, '-', '')
		,		USE_YN				= #{useYn}
		WHERE	PROJECT_ID			= #{projectId}
	</update>
	
	<update id="updateProjectBillId">
		/* project.updateProjectBillId */
		UPDATE	cm_console.CM_PROJECT
		SET		BILL_ID = #{billId}
		WHERE	PROJECT_ID = #{projectId}
	</update>
	
	<select id="selectProjectOwnerUser" resultType="hashMap">
		/* project.selectProjectOwnerUser */
		SELECT * 
		FROM cm_console.CM_CORP CC
		INNER JOIN cm_console.CM_USER CU 
			ON CC.CORP_ID  = CU.CORP_ID 
		INNER JOIN cm_bo.CM_USER_ROLE CUR 
			ON CU.USER_ID  = CUR.USER_ID 
		WHERE	CC.CORP_ID = #{corpId}
		AND		CUR.ROLE_CD = 'OWNER'
	</select>
	
	<insert id="insertProjectUser">
		/* project.insertProjectUser */
		INSERT	cm_console.CM_PROJECT_USER
		(
			PROJECT_ID
		,	CORP_ID
		,	USER_ID
		,	REG_ID
		,	REG_DT
		)
		VALUES
		(
			#{projectId}
		,	#{corpId}
		,	#{userId}
		,	#{userId}
		,	NOW()
		)
	</insert>
	
	<select id="selectApikeyMaxId" resultType="int">
		/* project.selectApikeyMaxId */
		SELECT	IFNULL(MAX(API_KEY),0) + 1 AS api_max_id
		FROM	cm.CM_APIKEY
	</select>
	
	<select id="selectProjectUseCnt" resultType="int">
		/* project.selectProjectUseCnt */
		SELECT
		(
			SELECT	COUNT(MSG_KEY) AS CNT
			FROM	cm.CM_MSG
			WHERE	PROJECT_ID = #{projectId}
		) + (
			SELECT	COUNT(WEB_REQ_ID) AS CNT
			FROM	cm_console.CM_WEB_MSG
			WHERE	PROJECT_ID = #{projectId}
		) AS CNT
	</select>
	
	<delete id="deleteProject">
		/* project.deleteProject */
		UPDATE	cm_console.CM_PROJECT
		SET		DEL_YN = 'Y'
		WHERE	PROJECT_ID = #{projectId}
	</delete>
	
	<delete id="deleteProjectUser">
		/* project.deleteProjectUser */
		DELETE FROM cm_console.CM_PROJECT_USER
		WHERE	PROJECT_ID = #{projectId}
	</delete>
	
	<delete id="deleteProjectApiKey">
		/* project.deleteProjectApiKey */
		DELETE FROM cm.CM_APIKEY
		WHERE	PROJECT_ID = #{projectId}
	</delete>
	
	<select id="checkPreRegYn" resultType="string">
		/* project.checkPreRegYn */
		SELECT	CASE WHEN COUNT(CORP_ID) > 0 THEN 'Y' ELSE 'N' END AS PRE_REG_YN
		FROM	cm_console.CM_SPECIAL_BUSI CSB 
		WHERE	CORP_ID  = #{corpId}
	</select>
	
	<insert id="insertSpecualBusi">
		/* project.insertSpecualBusi */
		INSERT	CM_SPECIAL_BUSI
		(
			CORP_ID
		,	REQ_TYPE
		,	APPROVAL_STATUS
		,	ATTACH_FILE_LIST
		,	REG_ID
		,	REG_DT
		)
		VALUES
		(
			#{corpId}
		,	#{reqType}
		,	'REQ'
		,	#{attachFileList}
		,	#{loginId}
		,	now()
		)
	</insert>
	
	<sql id="callbackManage">
		SELECT *
		FROM (
			SELECT	A.BRAND_NAME
			,		A.BRAND_ID
			,		B.CORP_ID 
			,		REPLACE(JSON_EXTRACT(B.CHATBOT_INFO , '$.subTitle[0]'), "\"", "") AS SUB_TITLE
			,		B.CHATBOT_ID 
			,		CASE 
						WHEN REPLACE(JSON_EXTRACT(B.CHATBOT_INFO , '$.rcsReply[0]'), "\"", "") = '0' THEN 'N' 
						ELSE 'Y'
					END AS RCS_REPLY
			,		B.APPROVAL_STATUS 
			,		date_format(B.REG_DT, '%Y-%m-%d') AS REG_DT
			,		B.APPROVAL_DT 
			FROM cm.CM_RCS_BRAND A 
			INNER JOIN cm.CM_RCS_CHATBOT B 
				ON A.BRAND_ID = B.BRAND_ID 
			WHERE	1 = 1
			AND		( A.PROJECT_ID  = #{projectId} OR A.PROJECT_ID  = 'ALL')
			
			UNION
			
			SELECT	A.BRAND_NAME
			,		A.BRAND_ID
			,		B.CORP_ID
			,		REPLACE(JSON_EXTRACT(B.CHATBOT_INFO , '$.subTitle[0]'), "\"", "") AS SUB_TITLE
			,		B.CHATBOT_ID 
			,		CASE 
						WHEN REPLACE(JSON_EXTRACT(B.CHATBOT_INFO , '$.rcsReply[0]'), "\"", "") = '0' THEN 'N' 
						ELSE 'Y'
					END AS RCS_REPLY
			,		B.APPROVAL_STATUS 
			,		date_format(B.REG_DT, '%Y-%m-%d') AS REG_DT
			,		B.APPROVAL_DT 
			FROM cm.CM_RCS_BRAND_REQ A 
			INNER JOIN cm.CM_RCS_CHATBOT_REQ B 
				on A.BRAND_ID = B.BRAND_ID 
			WHERE 1 = 1 
			AND ( A.PROJECT_ID  = #{projectId} or A.PROJECT_ID  = 'ALL')
			AND B.CHATBOT_ID NOT IN (
				SELECT BB.CHATBOT_ID 
				FROM cm.CM_RCS_BRAND AA 
				INNER JOIN cm.CM_RCS_CHATBOT BB 
					on AA.BRAND_ID = BB.BRAND_ID 
				WHERE	1=1
				AND		( AA.PROJECT_ID  = #{projectId} or AA.PROJECT_ID  = 'ALL')
			)
		) SUB_CB
		WHERE 1 = 1
		<if test="srcBrandName != null and srcBrandName != ''">
		AND		SUB_CB.BRAND_NAME LIKE CONCAT('%',#{srcBrandName},'%')
		</if>
		<if test="srcSubTitle != null and srcSubTitle != ''">
		AND		SUB_CB.SUB_TITLE LIKE CONCAT('%',#{srcSubTitle},'%')
		</if>
		<if test="srcChatbotId != null and srcChatbotId != ''">
		AND		SUB_CB.CHATBOT_ID LIKE CONCAT('%',#{srcChatbotId},'%')
		</if>
		<if test="srcRcsReply != null and srcRcsReply != ''">
		AND		SUB_CB.RCS_REPLY = #{srcRcsReply}
		</if>
		<if test="srcBrandName != null and srcBrandName != ''">
		AND		SUB_CB.BRAND_NAME = #{srcBrandName}
		</if>
		<if test="srcApprovalStatus != null and srcApprovalStatus != ''">
		AND		SUB_CB.APPROVAL_STATUS = #{srcApprovalStatus}
		</if> 
	</sql>
	
	<select id="selectCallbackManageListCnt" resultType="int">
		/* project.selectCallbackManageListCnt */
		SELECT	COUNT(1) AS CNT
		FROM (
			<include refid="callbackManage"/>
		) CB
		
	</select>
	
	<select id="selectCallbackManageList" resultType="camel">
		/* project.selectCallbackManageList */
		SELECT *
		FROM (
			<include refid="callbackManage"/>
		) CB
		WHERE 1=1
		ORDER BY CB.REG_DT DESC
	</select>
	
	<select id="selectCallbackManageDetail" resultType="camel">
		/* project.selectCallbackManageDetail */
		SELECT *
		FROM (
			<include refid="callbackManage"/>
		) CB
		WHERE	1=1
		AND		CB.CHATBOT_ID = #{chatbotId}
	</select>
	
</mapper>