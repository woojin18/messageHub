<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="address">
	<select id="selectAddressCateGrpList" resultType="camel">
		/* address.selectAddressCateGrpList */
		SELECT	ADDRESS_CATEGORY_GRP_ID
			,	CORP_ID
			,	PROJECT_ID					/* 전용: project id 입력, 사용: ALL */
			,	ADDRESS_CATEGORY_GRP_NAME
			,	ADDRESS_CATEGORY_GRP_DESC
			,	USE_YN
			,	REG_ID
			,	REG_DT
		FROM CM_ADDR_CATE_GRP
		WHERE 1=1
		AND	CORP_ID = #{corpId}
	</select>

	<select id="selectAddressGrp" parameterType="hashmap" resultType="camel">
		/* address.selectAddressGrp */
		SELECT
			CACG.ADDRESS_CATEGORY_GRP_ID
			, NULL AS ADDRESS_CATEGORY_ID
			, NULL AS DIS_ORDER
			, CACG.ADDRESS_CATEGORY_GRP_NAME AS ADDRESS_NAME
			, NULL AS PAR_ADDRESS_CATEGORY_ID
		FROM CM_ADDR_CATE_GRP CACG
		WHERE 1=1
			AND CACG.CORP_ID = #{corpId}
			AND	CACG.ADDRESS_CATEGORY_GRP_ID = #{addressCategoryGrpId}
	</select>

	<select id="selectAddressCateList" parameterType="hashmap" resultType="camel">
		/* address.selectAddressCateList 주소록 카테고리 목록 조회 */
		SELECT
			CAC.ADDRESS_CATEGORY_ID
			, CAC.ADDRESS_CATEGORY_GRP_ID
			, NULL AS GRP_DIS_ORDER
			, CAC.DIS_ORDER
			, CAC.ADDRESS_CATEGORY_NAME  AS ADDRESS_NAME
			, CAC.PAR_ADDRESS_CATEGORY_ID
		FROM CM_ADDR_CATE_GRP CACG
		INNER JOIN CM_ADDR_CATE CAC
			ON CACG.ADDRESS_CATEGORY_GRP_ID = CAC.ADDRESS_CATEGORY_GRP_ID
			AND CAC.DEL_YN = 'N'
		WHERE 1=1
			AND CACG.CORP_ID = #{corpId}
			AND	CACG.ADDRESS_CATEGORY_GRP_ID = #{addressCategoryGrpId}
		ORDER BY CAC.DIS_ORDER
	</select>

	<select id="selectAddressMemListCnt" parameterType="hashmap" resultType="int">
		/* address.selectAddressMemListCnt 주소록 구성원 카운트 조회 */
		SELECT
			COUNT(*) AS CNT
		FROM ( 
				SELECT CU_INFO_ID
				FROM CM_ADDR_CATE_MEM
				WHERE ADDRESS_CATEGORY_ID = #{addressCategoryId}
		) A
		INNER JOIN CM_CU_INFO B
		ON		A.CU_INFO_ID = B.CU_INFO_ID
		WHERE	B.USE_YN = 'Y'
	</select>
	
	<select id="selectAddressMemList" parameterType="hashmap" resultType="camel">
		/* address.selectAddressMemList 주소록 구성원 조회 */
		SELECT
			B.CU_INFO_ID
		,	B.CU_NAME
		,	B.CUID
		,	B.HP_NUMBER
		FROM ( 
				SELECT CU_INFO_ID
				FROM CM_ADDR_CATE_MEM
				WHERE ADDRESS_CATEGORY_ID = #{addressCategoryId}
		) A
		INNER JOIN CM_CU_INFO B
		ON		A.CU_INFO_ID = B.CU_INFO_ID
		WHERE	B.USE_YN = 'Y'
		ORDER BY B.CU_NAME ASC
		<if test='pagingYn == "Y" '>
			LIMIT ${offset}, #{listSize}
		</if>
	</select>
	
	<select id="selectProjectList" parameterType="hashmap" resultType="camel">
		/* address.selectProjectList 프로젝트 조회 */
		SELECT 
			B.PROJECT_ID
		,	B.PROJECT_NAME
		FROM CM_PROJECT_USER A
		INNER JOIN CM_PROJECT B
		ON A.PROJECT_ID = B.PROJECT_ID
		WHERE A.USER_ID = #{userId}
	</select>
	
	<insert id="insertAddressCateGrp">
		/* address.insertAddressCateGrp 주소록 등록 */
		INSERT INTO	CM_ADDR_CATE_GRP (
				ADDRESS_CATEGORY_GRP_ID
		,		CORP_ID
		,		PROJECT_ID
		,		ADDRESS_CATEGORY_GRP_NAME
		,		ADDRESS_CATEGORY_GRP_DESC
		,		USE_YN
		,		REG_ID
		,		REG_DT
		)	VALUES (
				(SELECT IFNULL(MAX(ADDRESS_CATEGORY_GRP_ID) + 1, 1) FROM CM_ADDR_CATE_GRP B)
		,		#{corpId}
		,		#{newProjectId}
		,		#{addressCategoryGrpName}
		,		#{addressCategoryGrpDesc}
		,		#{useYn}
		,		#{loginId}
		,		NOW()
		)
	</insert>
	
	<update id="updateAddressCateGrp" parameterType="hashmap">
		/* address.updateAddressCateGrp 주소록 수정*/
		UPDATE CM_ADDR_CATE_GRP
		SET
			PROJECT_ID = #{afProjectId} 
		,	ADDRESS_CATEGORY_GRP_NAME = #{addressCategoryGrpName}
		,	ADDRESS_CATEGORY_GRP_DESC = #{addressCategoryGrpDesc}
		,	USE_YN = #{useYn}
		WHERE
			ADDRESS_CATEGORY_GRP_ID = #{addressCategoryGrpId}
	</update>
	
	<select id="selectAddrCmCuListCnt" parameterType="hashmap" resultType="int">
		/* address.selectAddrCmCuListCnt 주소록 카테고리 수신자 카운트 조회 */
		SELECT
			COUNT(*) AS CNT
		FROM CM_CU_INFO
		WHERE	USE_YN = 'Y'
		AND		CORP_ID = #{corpId}
		AND		CU_INFO_ID NOT IN (	SELECT	CU_INFO_ID
									FROM	CM_ADDR_CATE_MEM
									WHERE	ADDRESS_CATEGORY_ID = #{addressCategoryId}
								)
		<if test="searchText != '' and searchText != null ">
			<if test="searchTextType == 'cuid' ">
		AND CUID LIKE CONCAT('%', #{searchText}, '%')
			</if>
			<if test="searchTextType == 'cuName' ">
		AND CU_NAME LIKE CONCAT('%', #{searchText}, '%')
			</if>
			<if test="searchTextType == 'hpNumber' ">
		AND HP_NUMBER LIKE CONCAT('%', #{searchText}, '%')
			</if>
		</if>
	</select>

	<select id="selectAddrCmCuList" parameterType="hashmap" resultType="camel">
		/* address.selectAddrCmCuList 주소록 카테고리 수신자 리스트 조회 */
		SELECT
				CU_INFO_ID
			,	CU_NAME
			,	CUID
			,	HP_NUMBER
		FROM CM_CU_INFO
		WHERE	USE_YN = 'Y'
		AND		CORP_ID = #{corpId}
		AND		CU_INFO_ID NOT IN (	SELECT	CU_INFO_ID
									FROM	CM_ADDR_CATE_MEM
									WHERE	ADDRESS_CATEGORY_ID = #{addressCategoryId}
								)
		<if test="searchText != '' and searchText != null ">
			<if test="searchTextType == 'cuid' ">
				AND CUID LIKE CONCAT('%', #{searchText}, '%')
			</if>
			<if test="searchTextType == 'cuName' ">
				AND CU_NAME LIKE CONCAT('%', #{searchText}, '%')
			</if>
			<if test="searchTextType == 'hpNumber' ">
				AND HP_NUMBER LIKE CONCAT('%', #{searchText}, '%')
			</if>
		</if>
		ORDER BY CU_INFO_ID
		<if test='pagingYn == "Y" '>
			LIMIT ${offset}, #{listSize}
		</if>
	</select>
	
	<insert id="insertAddrMemberList">
		/* address.insertAddrMemberList 구성원 등록 */
		INSERT INTO	CM_ADDR_CATE_MEM (
				ADDRESS_CATEGORY_ID
		,		CU_INFO_ID
		,		REG_ID
		,		REG_DT
		)	VALUES (
				#{addressCategoryId}
		,		#{cuInfoId}
		,		#{loginId}
		,		NOW()
		)
	</insert>
	
	<delete id="deleteAddrMember">
		/* address.deleteAddrMember */
		DELETE	FROM CM_ADDR_CATE_MEM
		WHERE	ADDRESS_CATEGORY_ID = #{addressCategoryId}
		AND		CU_INFO_ID = #{cuInfoId}
	</delete>
</mapper>